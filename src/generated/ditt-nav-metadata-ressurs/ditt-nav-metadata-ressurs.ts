/**
 * Generated by orval v6.11.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery, useMutation} from "@tanstack/react-query";
import type {
    UseQueryOptions,
    UseMutationOptions,
    QueryFunction,
    MutationFunction,
    UseQueryResult,
    QueryKey,
} from "@tanstack/react-query";
import type {MarkerPabegyntSoknadSomLestDto, PabegyntSoknadDto} from ".././model";
import {axiosInstance} from "../../lib/orval/axios-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never;

export const settLestForPabegyntSoknad = (
    markerPabegyntSoknadSomLestDto: MarkerPabegyntSoknadSomLestDto,
    options?: SecondParameter<typeof axiosInstance>
) => {
    return axiosInstance<boolean>(
        {
            url: `/dittnav/pabegynte/lest`,
            method: "post",
            headers: {"Content-Type": "application/json"},
            data: markerPabegyntSoknadSomLestDto,
        },
        options
    );
};

export type SettLestForPabegyntSoknadMutationResult = NonNullable<
    Awaited<ReturnType<typeof settLestForPabegyntSoknad>>
>;
export type SettLestForPabegyntSoknadMutationBody = MarkerPabegyntSoknadSomLestDto;
export type SettLestForPabegyntSoknadMutationError = unknown;

export const useSettLestForPabegyntSoknad = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof settLestForPabegyntSoknad>>,
        TError,
        {data: MarkerPabegyntSoknadSomLestDto},
        TContext
    >;
    request?: SecondParameter<typeof axiosInstance>;
}) => {
    const {mutation: mutationOptions, request: requestOptions} = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof settLestForPabegyntSoknad>>,
        {data: MarkerPabegyntSoknadSomLestDto}
    > = (props) => {
        const {data} = props ?? {};

        return settLestForPabegyntSoknad(data, requestOptions);
    };

    return useMutation<
        Awaited<ReturnType<typeof settLestForPabegyntSoknad>>,
        TError,
        {data: MarkerPabegyntSoknadSomLestDto},
        TContext
    >(mutationFn, mutationOptions);
};
export const hentPabegynteSoknaderForBrukerSomErLest = (
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<PabegyntSoknadDto[]>({url: `/dittnav/pabegynte/inaktive`, method: "get", signal}, options);
};

export const getHentPabegynteSoknaderForBrukerSomErLestQueryKey = () => [`/dittnav/pabegynte/inaktive`];

export type HentPabegynteSoknaderForBrukerSomErLestQueryResult = NonNullable<
    Awaited<ReturnType<typeof hentPabegynteSoknaderForBrukerSomErLest>>
>;
export type HentPabegynteSoknaderForBrukerSomErLestQueryError = unknown;

export const useHentPabegynteSoknaderForBrukerSomErLest = <
    TData = Awaited<ReturnType<typeof hentPabegynteSoknaderForBrukerSomErLest>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof hentPabegynteSoknaderForBrukerSomErLest>>, TError, TData>;
    request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentPabegynteSoknaderForBrukerSomErLestQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentPabegynteSoknaderForBrukerSomErLest>>> = ({signal}) =>
        hentPabegynteSoknaderForBrukerSomErLest(requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof hentPabegynteSoknaderForBrukerSomErLest>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const hentPabegynteSoknaderForBruker = (
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<PabegyntSoknadDto[]>({url: `/dittnav/pabegynte/aktive`, method: "get", signal}, options);
};

export const getHentPabegynteSoknaderForBrukerQueryKey = () => [`/dittnav/pabegynte/aktive`];

export type HentPabegynteSoknaderForBrukerQueryResult = NonNullable<
    Awaited<ReturnType<typeof hentPabegynteSoknaderForBruker>>
>;
export type HentPabegynteSoknaderForBrukerQueryError = unknown;

export const useHentPabegynteSoknaderForBruker = <
    TData = Awaited<ReturnType<typeof hentPabegynteSoknaderForBruker>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof hentPabegynteSoknaderForBruker>>, TError, TData>;
    request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentPabegynteSoknaderForBrukerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentPabegynteSoknaderForBruker>>> = ({signal}) =>
        hentPabegynteSoknaderForBruker(requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof hentPabegynteSoknaderForBruker>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};
