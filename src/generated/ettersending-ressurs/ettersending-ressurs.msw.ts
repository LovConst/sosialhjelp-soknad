/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {rest} from "msw";
import {faker} from "@faker-js/faker";

export const getHentBehandlingskjedeMock = () => ({
    originalSoknad: faker.helpers.arrayElement([
        {
            behandlingsId: faker.helpers.arrayElement([faker.random.word(), undefined]),
            innsendtDato: faker.helpers.arrayElement([faker.random.word(), undefined]),
            innsendtTidspunkt: faker.helpers.arrayElement([faker.random.word(), undefined]),
            soknadsalderIMinutter: faker.helpers.arrayElement([
                faker.datatype.number({min: undefined, max: undefined}),
                undefined,
            ]),
            innsendteVedlegg: faker.helpers.arrayElement([
                Array.from({length: faker.datatype.number({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
                    filnavn: faker.random.word(),
                    uuid: faker.helpers.arrayElement([faker.random.word(), undefined]),
                })),
                undefined,
            ]),
            ikkeInnsendteVedlegg: faker.helpers.arrayElement([
                Array.from({length: faker.datatype.number({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
                    filnavn: faker.random.word(),
                    uuid: faker.helpers.arrayElement([faker.random.word(), undefined]),
                })),
                undefined,
            ]),
            navenhet: faker.helpers.arrayElement([faker.random.word(), undefined]),
            orgnummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
        },
        undefined,
    ]),
    ettersendelser: faker.helpers.arrayElement([
        Array.from({length: faker.datatype.number({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
            behandlingsId: faker.helpers.arrayElement([faker.random.word(), undefined]),
            innsendtDato: faker.helpers.arrayElement([faker.random.word(), undefined]),
            innsendtTidspunkt: faker.helpers.arrayElement([faker.random.word(), undefined]),
            soknadsalderIMinutter: faker.helpers.arrayElement([
                faker.datatype.number({min: undefined, max: undefined}),
                undefined,
            ]),
            innsendteVedlegg: faker.helpers.arrayElement([
                Array.from({length: faker.datatype.number({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
                    filnavn: faker.random.word(),
                    uuid: faker.helpers.arrayElement([faker.random.word(), undefined]),
                })),
                undefined,
            ]),
            ikkeInnsendteVedlegg: faker.helpers.arrayElement([
                Array.from({length: faker.datatype.number({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
                    filnavn: faker.random.word(),
                    uuid: faker.helpers.arrayElement([faker.random.word(), undefined]),
                })),
                undefined,
            ]),
            navenhet: faker.helpers.arrayElement([faker.random.word(), undefined]),
            orgnummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
        })),
        undefined,
    ]),
});

export const getHentVedleggMock = () =>
    Array.from({length: faker.datatype.number({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
        type: faker.helpers.arrayElement([faker.random.word(), undefined]),
        vedleggStatus: faker.helpers.arrayElement([faker.random.word(), undefined]),
        filer: faker.helpers.arrayElement([
            Array.from({length: faker.datatype.number({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
                filNavn: faker.helpers.arrayElement([faker.random.word(), undefined]),
                uuid: faker.helpers.arrayElement([faker.random.word(), undefined]),
            })),
            undefined,
        ]),
    }));

export const getEttersendingRessursMSW = () => [
    rest.get("*/ettersendelse/innsendte/:behandlingsId", (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getHentBehandlingskjedeMock()));
    }),
    rest.get("*/ettersendelse/ettersendteVedlegg/:behandlingsId", (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getHentVedleggMock()));
    }),
];
