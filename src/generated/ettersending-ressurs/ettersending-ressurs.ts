/**
 * Generated by orval v6.11.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery} from "@tanstack/react-query";
import type {UseQueryOptions, QueryFunction, UseQueryResult, QueryKey} from "@tanstack/react-query";
import type {BehandlingsKjede, EttersendtVedlegg} from ".././model";
import {axiosInstance} from "../../lib/orval/axios-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never;

export const hentBehandlingskjede = (
    behandlingsId: string,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<BehandlingsKjede>(
        {url: `/ettersendelse/innsendte/${behandlingsId}`, method: "get", signal},
        options
    );
};

export const getHentBehandlingskjedeQueryKey = (behandlingsId: string) => [`/ettersendelse/innsendte/${behandlingsId}`];

export type HentBehandlingskjedeQueryResult = NonNullable<Awaited<ReturnType<typeof hentBehandlingskjede>>>;
export type HentBehandlingskjedeQueryError = unknown;

export const useHentBehandlingskjede = <TData = Awaited<ReturnType<typeof hentBehandlingskjede>>, TError = unknown>(
    behandlingsId: string,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof hentBehandlingskjede>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentBehandlingskjedeQueryKey(behandlingsId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentBehandlingskjede>>> = ({signal}) =>
        hentBehandlingskjede(behandlingsId, requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof hentBehandlingskjede>>, TError, TData>(queryKey, queryFn, {
        enabled: !!behandlingsId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const hentVedlegg = (
    behandlingsId: string,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<EttersendtVedlegg[]>(
        {url: `/ettersendelse/ettersendteVedlegg/${behandlingsId}`, method: "get", signal},
        options
    );
};

export const getHentVedleggQueryKey = (behandlingsId: string) => [`/ettersendelse/ettersendteVedlegg/${behandlingsId}`];

export type HentVedleggQueryResult = NonNullable<Awaited<ReturnType<typeof hentVedlegg>>>;
export type HentVedleggQueryError = unknown;

export const useHentVedlegg = <TData = Awaited<ReturnType<typeof hentVedlegg>>, TError = unknown>(
    behandlingsId: string,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentVedleggQueryKey(behandlingsId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentVedlegg>>> = ({signal}) =>
        hentVedlegg(behandlingsId, requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>(queryKey, queryFn, {
        enabled: !!behandlingsId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};
