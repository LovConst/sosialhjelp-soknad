/**
 * Generated by orval v6.11.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery} from "@tanstack/react-query";
import type {UseQueryOptions, QueryFunction, UseQueryResult, QueryKey} from "@tanstack/react-query";
import type {SjekksumDto, ReplicationDto, GetNextSoknadForMigrationParams} from ".././model";
import {axiosInstance} from "../../lib/orval/axios-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never;

export const getSjekksum = (options?: SecondParameter<typeof axiosInstance>, signal?: AbortSignal) => {
    return axiosInstance<SjekksumDto>({url: `/internal/migration/sjekksum`, method: "get", signal}, options);
};

export const getGetSjekksumQueryKey = () => [`/internal/migration/sjekksum`];

export type GetSjekksumQueryResult = NonNullable<Awaited<ReturnType<typeof getSjekksum>>>;
export type GetSjekksumQueryError = unknown;

export const useGetSjekksum = <TData = Awaited<ReturnType<typeof getSjekksum>>, TError = unknown>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSjekksum>>, TError, TData>;
    request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetSjekksumQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSjekksum>>> = ({signal}) =>
        getSjekksum(requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof getSjekksum>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const getNextSoknadForMigration = (
    params?: GetNextSoknadForMigrationParams,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<ReplicationDto>({url: `/internal/migration/feed`, method: "get", params, signal}, options);
};

export const getGetNextSoknadForMigrationQueryKey = (params?: GetNextSoknadForMigrationParams) => [
    `/internal/migration/feed`,
    ...(params ? [params] : []),
];

export type GetNextSoknadForMigrationQueryResult = NonNullable<Awaited<ReturnType<typeof getNextSoknadForMigration>>>;
export type GetNextSoknadForMigrationQueryError = unknown;

export const useGetNextSoknadForMigration = <
    TData = Awaited<ReturnType<typeof getNextSoknadForMigration>>,
    TError = unknown
>(
    params?: GetNextSoknadForMigrationParams,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof getNextSoknadForMigration>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetNextSoknadForMigrationQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNextSoknadForMigration>>> = ({signal}) =>
        getNextSoknadForMigration(params, requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof getNextSoknadForMigration>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};
