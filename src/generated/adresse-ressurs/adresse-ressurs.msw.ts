/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {rest} from "msw";
import {faker} from "@faker-js/faker";

export const getHentAdresserMock = () => ({
    valg: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["folkeregistrert", "midlertidig", "soknad"]),
        undefined,
    ]),
    folkeregistrert: faker.helpers.arrayElement([
        {
            type: faker.helpers.arrayElement([
                faker.helpers.arrayElement(["gateadresse", "matrikkeladresse", "postboks", "ustrukturert"]),
                undefined,
            ]),
            gateadresse: faker.helpers.arrayElement([
                {
                    landkode: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    kommunenummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    adresselinjer: faker.helpers.arrayElement([
                        Array.from({length: faker.datatype.number({min: 1, max: 10})}, (_, i) => i + 1).map(() =>
                            faker.random.word()
                        ),
                        undefined,
                    ]),
                    bolignummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    postnummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    poststed: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    gatenavn: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    husnummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    husbokstav: faker.helpers.arrayElement([faker.random.word(), undefined]),
                },
                undefined,
            ]),
            matrikkeladresse: faker.helpers.arrayElement([
                {
                    kommunenummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    gaardsnummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    bruksnummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    festenummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    seksjonsnummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    undernummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                },
                undefined,
            ]),
            ustrukturert: faker.helpers.arrayElement([
                {
                    adresse: faker.helpers.arrayElement([
                        Array.from({length: faker.datatype.number({min: 1, max: 10})}, (_, i) => i + 1).map(() =>
                            faker.random.word()
                        ),
                        undefined,
                    ]),
                },
                undefined,
            ]),
        },
        undefined,
    ]),
    midlertidig: faker.helpers.arrayElement([
        {
            type: faker.helpers.arrayElement([
                faker.helpers.arrayElement(["gateadresse", "matrikkeladresse", "postboks", "ustrukturert"]),
                undefined,
            ]),
            gateadresse: faker.helpers.arrayElement([
                {
                    landkode: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    kommunenummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    adresselinjer: faker.helpers.arrayElement([
                        Array.from({length: faker.datatype.number({min: 1, max: 10})}, (_, i) => i + 1).map(() =>
                            faker.random.word()
                        ),
                        undefined,
                    ]),
                    bolignummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    postnummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    poststed: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    gatenavn: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    husnummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    husbokstav: faker.helpers.arrayElement([faker.random.word(), undefined]),
                },
                undefined,
            ]),
            matrikkeladresse: faker.helpers.arrayElement([
                {
                    kommunenummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    gaardsnummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    bruksnummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    festenummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    seksjonsnummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    undernummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                },
                undefined,
            ]),
            ustrukturert: faker.helpers.arrayElement([
                {
                    adresse: faker.helpers.arrayElement([
                        Array.from({length: faker.datatype.number({min: 1, max: 10})}, (_, i) => i + 1).map(() =>
                            faker.random.word()
                        ),
                        undefined,
                    ]),
                },
                undefined,
            ]),
        },
        undefined,
    ]),
    soknad: faker.helpers.arrayElement([
        {
            type: faker.helpers.arrayElement([
                faker.helpers.arrayElement(["gateadresse", "matrikkeladresse", "postboks", "ustrukturert"]),
                undefined,
            ]),
            gateadresse: faker.helpers.arrayElement([
                {
                    landkode: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    kommunenummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    adresselinjer: faker.helpers.arrayElement([
                        Array.from({length: faker.datatype.number({min: 1, max: 10})}, (_, i) => i + 1).map(() =>
                            faker.random.word()
                        ),
                        undefined,
                    ]),
                    bolignummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    postnummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    poststed: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    gatenavn: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    husnummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    husbokstav: faker.helpers.arrayElement([faker.random.word(), undefined]),
                },
                undefined,
            ]),
            matrikkeladresse: faker.helpers.arrayElement([
                {
                    kommunenummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    gaardsnummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    bruksnummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    festenummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    seksjonsnummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                    undernummer: faker.helpers.arrayElement([faker.random.word(), undefined]),
                },
                undefined,
            ]),
            ustrukturert: faker.helpers.arrayElement([
                {
                    adresse: faker.helpers.arrayElement([
                        Array.from({length: faker.datatype.number({min: 1, max: 10})}, (_, i) => i + 1).map(() =>
                            faker.random.word()
                        ),
                        undefined,
                    ]),
                },
                undefined,
            ]),
        },
        undefined,
    ]),
    navEnhet: faker.helpers.arrayElement([
        {
            orgnr: faker.helpers.arrayElement([faker.random.word(), undefined]),
            enhetsnr: faker.helpers.arrayElement([faker.random.word(), undefined]),
            enhetsnavn: faker.random.word(),
            kommunenavn: faker.helpers.arrayElement([faker.random.word(), undefined]),
            kommuneNr: faker.helpers.arrayElement([faker.random.word(), undefined]),
            behandlingsansvarlig: faker.helpers.arrayElement([faker.random.word(), undefined]),
            valgt: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
            isMottakMidlertidigDeaktivert: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
            isMottakDeaktivert: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
        },
        undefined,
    ]),
});

export const getUpdateAdresseMock = () =>
    Array.from({length: faker.datatype.number({min: 1, max: 10})}, (_, i) => i + 1).map(() => ({
        orgnr: faker.helpers.arrayElement([faker.random.word(), undefined]),
        enhetsnr: faker.helpers.arrayElement([faker.random.word(), undefined]),
        enhetsnavn: faker.random.word(),
        kommunenavn: faker.helpers.arrayElement([faker.random.word(), undefined]),
        kommuneNr: faker.helpers.arrayElement([faker.random.word(), undefined]),
        behandlingsansvarlig: faker.helpers.arrayElement([faker.random.word(), undefined]),
        valgt: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
        isMottakMidlertidigDeaktivert: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
        isMottakDeaktivert: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    }));

export const getAdresseRessursMSW = () => [
    rest.get("*/soknader/:behandlingsId/personalia/adresser", (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getHentAdresserMock()));
    }),
    rest.put("*/soknader/:behandlingsId/personalia/adresser", (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getUpdateAdresseMock()));
    }),
];
