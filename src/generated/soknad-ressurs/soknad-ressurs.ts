/**
 * Generated by orval v6.11.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery, useMutation} from "@tanstack/react-query";
import type {
    UseQueryOptions,
    UseMutationOptions,
    QueryFunction,
    MutationFunction,
    UseQueryResult,
    QueryKey,
} from "@tanstack/react-query";
import type {BekreftelseRessurs, OpprettSoknad200, OpprettSoknadParams} from ".././model";
import {axiosInstance} from "../../lib/orval/axios-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never;

export const oppdaterSamtykker = (
    behandlingsId: string,
    bekreftelseRessurs: BekreftelseRessurs[],
    options?: SecondParameter<typeof axiosInstance>
) => {
    return axiosInstance<void>(
        {
            url: `/soknader/${behandlingsId}/oppdaterSamtykker`,
            method: "post",
            headers: {"Content-Type": "application/json"},
            data: bekreftelseRessurs,
        },
        options
    );
};

export type OppdaterSamtykkerMutationResult = NonNullable<Awaited<ReturnType<typeof oppdaterSamtykker>>>;
export type OppdaterSamtykkerMutationBody = BekreftelseRessurs[];
export type OppdaterSamtykkerMutationError = unknown;

export const useOppdaterSamtykker = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof oppdaterSamtykker>>,
        TError,
        {behandlingsId: string; data: BekreftelseRessurs[]},
        TContext
    >;
    request?: SecondParameter<typeof axiosInstance>;
}) => {
    const {mutation: mutationOptions, request: requestOptions} = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof oppdaterSamtykker>>,
        {behandlingsId: string; data: BekreftelseRessurs[]}
    > = (props) => {
        const {behandlingsId, data} = props ?? {};

        return oppdaterSamtykker(behandlingsId, data, requestOptions);
    };

    return useMutation<
        Awaited<ReturnType<typeof oppdaterSamtykker>>,
        TError,
        {behandlingsId: string; data: BekreftelseRessurs[]},
        TContext
    >(mutationFn, mutationOptions);
};
export const opprettSoknad = (params?: OpprettSoknadParams, options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<OpprettSoknad200>({url: `/soknader/opprettSoknad`, method: "post", params}, options);
};

export type OpprettSoknadMutationResult = NonNullable<Awaited<ReturnType<typeof opprettSoknad>>>;

export type OpprettSoknadMutationError = unknown;

export const useOpprettSoknad = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof opprettSoknad>>,
        TError,
        {params?: OpprettSoknadParams},
        TContext
    >;
    request?: SecondParameter<typeof axiosInstance>;
}) => {
    const {mutation: mutationOptions, request: requestOptions} = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof opprettSoknad>>, {params?: OpprettSoknadParams}> = (
        props
    ) => {
        const {params} = props ?? {};

        return opprettSoknad(params, requestOptions);
    };

    return useMutation<Awaited<ReturnType<typeof opprettSoknad>>, TError, {params?: OpprettSoknadParams}, TContext>(
        mutationFn,
        mutationOptions
    );
};
export const hentXsrfCookie = (
    behandlingsId: string,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<boolean>({url: `/soknader/${behandlingsId}/xsrfCookie`, method: "get", signal}, options);
};

export const getHentXsrfCookieQueryKey = (behandlingsId: string) => [`/soknader/${behandlingsId}/xsrfCookie`];

export type HentXsrfCookieQueryResult = NonNullable<Awaited<ReturnType<typeof hentXsrfCookie>>>;
export type HentXsrfCookieQueryError = unknown;

export const useHentXsrfCookie = <TData = Awaited<ReturnType<typeof hentXsrfCookie>>, TError = unknown>(
    behandlingsId: string,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof hentXsrfCookie>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentXsrfCookieQueryKey(behandlingsId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentXsrfCookie>>> = ({signal}) =>
        hentXsrfCookie(behandlingsId, requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof hentXsrfCookie>>, TError, TData>(queryKey, queryFn, {
        enabled: !!behandlingsId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const hentSamtykker = (
    behandlingsId: string,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<BekreftelseRessurs[]>(
        {url: `/soknader/${behandlingsId}/hentSamtykker`, method: "get", signal},
        options
    );
};

export const getHentSamtykkerQueryKey = (behandlingsId: string) => [`/soknader/${behandlingsId}/hentSamtykker`];

export type HentSamtykkerQueryResult = NonNullable<Awaited<ReturnType<typeof hentSamtykker>>>;
export type HentSamtykkerQueryError = unknown;

export const useHentSamtykker = <TData = Awaited<ReturnType<typeof hentSamtykker>>, TError = unknown>(
    behandlingsId: string,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof hentSamtykker>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentSamtykkerQueryKey(behandlingsId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentSamtykker>>> = ({signal}) =>
        hentSamtykker(behandlingsId, requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof hentSamtykker>>, TError, TData>(queryKey, queryFn, {
        enabled: !!behandlingsId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const sjekkOmSystemdataErEndret = (
    behandlingsId: string,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<boolean>(
        {url: `/soknader/${behandlingsId}/erSystemdataEndret`, method: "get", signal},
        options
    );
};

export const getSjekkOmSystemdataErEndretQueryKey = (behandlingsId: string) => [
    `/soknader/${behandlingsId}/erSystemdataEndret`,
];

export type SjekkOmSystemdataErEndretQueryResult = NonNullable<Awaited<ReturnType<typeof sjekkOmSystemdataErEndret>>>;
export type SjekkOmSystemdataErEndretQueryError = unknown;

export const useSjekkOmSystemdataErEndret = <
    TData = Awaited<ReturnType<typeof sjekkOmSystemdataErEndret>>,
    TError = unknown
>(
    behandlingsId: string,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof sjekkOmSystemdataErEndret>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getSjekkOmSystemdataErEndretQueryKey(behandlingsId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sjekkOmSystemdataErEndret>>> = ({signal}) =>
        sjekkOmSystemdataErEndret(behandlingsId, requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof sjekkOmSystemdataErEndret>>, TError, TData>(queryKey, queryFn, {
        enabled: !!behandlingsId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const slettSoknad = (behandlingsId: string, options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<void>({url: `/soknader/${behandlingsId}`, method: "delete"}, options);
};

export type SlettSoknadMutationResult = NonNullable<Awaited<ReturnType<typeof slettSoknad>>>;

export type SlettSoknadMutationError = unknown;

export const useSlettSoknad = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof slettSoknad>>, TError, {behandlingsId: string}, TContext>;
    request?: SecondParameter<typeof axiosInstance>;
}) => {
    const {mutation: mutationOptions, request: requestOptions} = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof slettSoknad>>, {behandlingsId: string}> = (props) => {
        const {behandlingsId} = props ?? {};

        return slettSoknad(behandlingsId, requestOptions);
    };

    return useMutation<Awaited<ReturnType<typeof slettSoknad>>, TError, {behandlingsId: string}, TContext>(
        mutationFn,
        mutationOptions
    );
};
