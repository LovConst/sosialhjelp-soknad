/**
 * Generated by orval v6.11.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery, useMutation} from "@tanstack/react-query";
import type {
    UseQueryOptions,
    UseMutationOptions,
    QueryFunction,
    MutationFunction,
    UseQueryResult,
    QueryKey,
} from "@tanstack/react-query";
import type {FilFrontend, SaveVedleggBody} from ".././model";
import {axiosInstance} from "../../lib/orval/axios-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never;

export const saveVedlegg = (
    behandlingsId: string,
    type: string,
    saveVedleggBody: SaveVedleggBody,
    options?: SecondParameter<typeof axiosInstance>
) => {
    const formData = new FormData();
    formData.append("file", saveVedleggBody.file);

    return axiosInstance<FilFrontend>(
        {
            url: `/opplastetVedlegg/${behandlingsId}/${type}`,
            method: "post",
            headers: {"Content-Type": "multipart/form-data"},
            data: formData,
        },
        options
    );
};

export type SaveVedleggMutationResult = NonNullable<Awaited<ReturnType<typeof saveVedlegg>>>;
export type SaveVedleggMutationBody = SaveVedleggBody;
export type SaveVedleggMutationError = unknown;

export const useSaveVedlegg = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof saveVedlegg>>,
        TError,
        {behandlingsId: string; type: string; data: SaveVedleggBody},
        TContext
    >;
    request?: SecondParameter<typeof axiosInstance>;
}) => {
    const {mutation: mutationOptions, request: requestOptions} = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof saveVedlegg>>,
        {behandlingsId: string; type: string; data: SaveVedleggBody}
    > = (props) => {
        const {behandlingsId, type, data} = props ?? {};

        return saveVedlegg(behandlingsId, type, data, requestOptions);
    };

    return useMutation<
        Awaited<ReturnType<typeof saveVedlegg>>,
        TError,
        {behandlingsId: string; type: string; data: SaveVedleggBody},
        TContext
    >(mutationFn, mutationOptions);
};
export const getVedleggFil = (
    vedleggId: string,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<string>({url: `/opplastetVedlegg/${vedleggId}/fil`, method: "get", signal}, options);
};

export const getGetVedleggFilQueryKey = (vedleggId: string) => [`/opplastetVedlegg/${vedleggId}/fil`];

export type GetVedleggFilQueryResult = NonNullable<Awaited<ReturnType<typeof getVedleggFil>>>;
export type GetVedleggFilQueryError = unknown;

export const useGetVedleggFil = <TData = Awaited<ReturnType<typeof getVedleggFil>>, TError = unknown>(
    vedleggId: string,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof getVedleggFil>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetVedleggFilQueryKey(vedleggId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVedleggFil>>> = ({signal}) =>
        getVedleggFil(vedleggId, requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof getVedleggFil>>, TError, TData>(queryKey, queryFn, {
        enabled: !!vedleggId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const getVedleggFil1 = (
    behandlingsId: string,
    vedleggId: string,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<string>(
        {url: `/opplastetVedlegg/${behandlingsId}/${vedleggId}/fil`, method: "get", signal},
        options
    );
};

export const getGetVedleggFil1QueryKey = (behandlingsId: string, vedleggId: string) => [
    `/opplastetVedlegg/${behandlingsId}/${vedleggId}/fil`,
];

export type GetVedleggFil1QueryResult = NonNullable<Awaited<ReturnType<typeof getVedleggFil1>>>;
export type GetVedleggFil1QueryError = unknown;

export const useGetVedleggFil1 = <TData = Awaited<ReturnType<typeof getVedleggFil1>>, TError = unknown>(
    behandlingsId: string,
    vedleggId: string,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof getVedleggFil1>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetVedleggFil1QueryKey(behandlingsId, vedleggId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVedleggFil1>>> = ({signal}) =>
        getVedleggFil1(behandlingsId, vedleggId, requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof getVedleggFil1>>, TError, TData>(queryKey, queryFn, {
        enabled: !!(behandlingsId && vedleggId),
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const deleteVedlegg = (
    behandlingsId: string,
    vedleggId: string,
    options?: SecondParameter<typeof axiosInstance>
) => {
    return axiosInstance<void>({url: `/opplastetVedlegg/${behandlingsId}/${vedleggId}`, method: "delete"}, options);
};

export type DeleteVedleggMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVedlegg>>>;

export type DeleteVedleggMutationError = unknown;

export const useDeleteVedlegg = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteVedlegg>>,
        TError,
        {behandlingsId: string; vedleggId: string},
        TContext
    >;
    request?: SecondParameter<typeof axiosInstance>;
}) => {
    const {mutation: mutationOptions, request: requestOptions} = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteVedlegg>>,
        {behandlingsId: string; vedleggId: string}
    > = (props) => {
        const {behandlingsId, vedleggId} = props ?? {};

        return deleteVedlegg(behandlingsId, vedleggId, requestOptions);
    };

    return useMutation<
        Awaited<ReturnType<typeof deleteVedlegg>>,
        TError,
        {behandlingsId: string; vedleggId: string},
        TContext
    >(mutationFn, mutationOptions);
};
