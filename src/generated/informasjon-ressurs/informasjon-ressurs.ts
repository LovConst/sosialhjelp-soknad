/**
 * Generated by orval v6.11.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery, useMutation} from "@tanstack/react-query";
import type {
    UseQueryOptions,
    UseMutationOptions,
    QueryFunction,
    MutationFunction,
    UseQueryResult,
    QueryKey,
} from "@tanstack/react-query";
import type {
    Logg,
    GetUtslagskriterier200,
    HentTekster200,
    HentTeksterParams,
    PabegyntSoknad,
    HentKommunestatus200,
    TriggeKommuneloggParams,
    NyligInnsendteSoknaderResponse,
    HentFornavn200,
    AdresseForslag,
    AdresseSokParams,
} from ".././model";
import {axiosInstance} from "../../lib/orval/axios-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never;

export const loggFraKlient = (logg: Logg, options?: SecondParameter<typeof axiosInstance>) => {
    return axiosInstance<void>(
        {url: `/informasjon/actions/logg`, method: "post", headers: {"Content-Type": "application/json"}, data: logg},
        options
    );
};

export type LoggFraKlientMutationResult = NonNullable<Awaited<ReturnType<typeof loggFraKlient>>>;
export type LoggFraKlientMutationBody = Logg;
export type LoggFraKlientMutationError = unknown;

export const useLoggFraKlient = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof loggFraKlient>>, TError, {data: Logg}, TContext>;
    request?: SecondParameter<typeof axiosInstance>;
}) => {
    const {mutation: mutationOptions, request: requestOptions} = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof loggFraKlient>>, {data: Logg}> = (props) => {
        const {data} = props ?? {};

        return loggFraKlient(data, requestOptions);
    };

    return useMutation<Awaited<ReturnType<typeof loggFraKlient>>, TError, {data: Logg}, TContext>(
        mutationFn,
        mutationOptions
    );
};
export const getUtslagskriterier = (options?: SecondParameter<typeof axiosInstance>, signal?: AbortSignal) => {
    return axiosInstance<GetUtslagskriterier200>(
        {url: `/informasjon/utslagskriterier/sosialhjelp`, method: "get", signal},
        options
    );
};

export const getGetUtslagskriterierQueryKey = () => [`/informasjon/utslagskriterier/sosialhjelp`];

export type GetUtslagskriterierQueryResult = NonNullable<Awaited<ReturnType<typeof getUtslagskriterier>>>;
export type GetUtslagskriterierQueryError = unknown;

export const useGetUtslagskriterier = <
    TData = Awaited<ReturnType<typeof getUtslagskriterier>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getUtslagskriterier>>, TError, TData>;
    request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetUtslagskriterierQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUtslagskriterier>>> = ({signal}) =>
        getUtslagskriterier(requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof getUtslagskriterier>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const hentTekster = (
    params: HentTeksterParams,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<HentTekster200>({url: `/informasjon/tekster`, method: "get", params, signal}, options);
};

export const getHentTeksterQueryKey = (params: HentTeksterParams) => [
    `/informasjon/tekster`,
    ...(params ? [params] : []),
];

export type HentTeksterQueryResult = NonNullable<Awaited<ReturnType<typeof hentTekster>>>;
export type HentTeksterQueryError = unknown;

export const useHentTekster = <TData = Awaited<ReturnType<typeof hentTekster>>, TError = unknown>(
    params: HentTeksterParams,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof hentTekster>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentTeksterQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentTekster>>> = ({signal}) =>
        hentTekster(params, requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof hentTekster>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const hentPabegynteSoknader = (options?: SecondParameter<typeof axiosInstance>, signal?: AbortSignal) => {
    return axiosInstance<PabegyntSoknad[]>({url: `/informasjon/pabegynteSoknader`, method: "get", signal}, options);
};

export const getHentPabegynteSoknaderQueryKey = () => [`/informasjon/pabegynteSoknader`];

export type HentPabegynteSoknaderQueryResult = NonNullable<Awaited<ReturnType<typeof hentPabegynteSoknader>>>;
export type HentPabegynteSoknaderQueryError = unknown;

export const useHentPabegynteSoknader = <
    TData = Awaited<ReturnType<typeof hentPabegynteSoknader>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof hentPabegynteSoknader>>, TError, TData>;
    request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentPabegynteSoknaderQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentPabegynteSoknader>>> = ({signal}) =>
        hentPabegynteSoknader(requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof hentPabegynteSoknader>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const hentKommunestatus = (options?: SecondParameter<typeof axiosInstance>, signal?: AbortSignal) => {
    return axiosInstance<HentKommunestatus200>({url: `/informasjon/kommunestatus`, method: "get", signal}, options);
};

export const getHentKommunestatusQueryKey = () => [`/informasjon/kommunestatus`];

export type HentKommunestatusQueryResult = NonNullable<Awaited<ReturnType<typeof hentKommunestatus>>>;
export type HentKommunestatusQueryError = unknown;

export const useHentKommunestatus = <
    TData = Awaited<ReturnType<typeof hentKommunestatus>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof hentKommunestatus>>, TError, TData>;
    request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentKommunestatusQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentKommunestatus>>> = ({signal}) =>
        hentKommunestatus(requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof hentKommunestatus>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const triggeKommunelogg = (
    params: TriggeKommuneloggParams,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<string>({url: `/informasjon/kommunelogg`, method: "get", params, signal}, options);
};

export const getTriggeKommuneloggQueryKey = (params: TriggeKommuneloggParams) => [
    `/informasjon/kommunelogg`,
    ...(params ? [params] : []),
];

export type TriggeKommuneloggQueryResult = NonNullable<Awaited<ReturnType<typeof triggeKommunelogg>>>;
export type TriggeKommuneloggQueryError = unknown;

export const useTriggeKommunelogg = <TData = Awaited<ReturnType<typeof triggeKommunelogg>>, TError = unknown>(
    params: TriggeKommuneloggParams,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof triggeKommunelogg>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getTriggeKommuneloggQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof triggeKommunelogg>>> = ({signal}) =>
        triggeKommunelogg(params, requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof triggeKommunelogg>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const harNyligInnsendteSoknader = (options?: SecondParameter<typeof axiosInstance>, signal?: AbortSignal) => {
    return axiosInstance<NyligInnsendteSoknaderResponse>(
        {url: `/informasjon/harNyligInnsendteSoknader`, method: "get", signal},
        options
    );
};

export const getHarNyligInnsendteSoknaderQueryKey = () => [`/informasjon/harNyligInnsendteSoknader`];

export type HarNyligInnsendteSoknaderQueryResult = NonNullable<Awaited<ReturnType<typeof harNyligInnsendteSoknader>>>;
export type HarNyligInnsendteSoknaderQueryError = unknown;

export const useHarNyligInnsendteSoknader = <
    TData = Awaited<ReturnType<typeof harNyligInnsendteSoknader>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof harNyligInnsendteSoknader>>, TError, TData>;
    request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHarNyligInnsendteSoknaderQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof harNyligInnsendteSoknader>>> = ({signal}) =>
        harNyligInnsendteSoknader(requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof harNyligInnsendteSoknader>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const hentFornavn = (options?: SecondParameter<typeof axiosInstance>, signal?: AbortSignal) => {
    return axiosInstance<HentFornavn200>({url: `/informasjon/fornavn`, method: "get", signal}, options);
};

export const getHentFornavnQueryKey = () => [`/informasjon/fornavn`];

export type HentFornavnQueryResult = NonNullable<Awaited<ReturnType<typeof hentFornavn>>>;
export type HentFornavnQueryError = unknown;

export const useHentFornavn = <TData = Awaited<ReturnType<typeof hentFornavn>>, TError = unknown>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof hentFornavn>>, TError, TData>;
    request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentFornavnQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentFornavn>>> = ({signal}) =>
        hentFornavn(requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof hentFornavn>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const adresseSok = (
    params?: AdresseSokParams,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<AdresseForslag[]>({url: `/informasjon/adressesok`, method: "get", params, signal}, options);
};

export const getAdresseSokQueryKey = (params?: AdresseSokParams) => [
    `/informasjon/adressesok`,
    ...(params ? [params] : []),
];

export type AdresseSokQueryResult = NonNullable<Awaited<ReturnType<typeof adresseSok>>>;
export type AdresseSokQueryError = unknown;

export const useAdresseSok = <TData = Awaited<ReturnType<typeof adresseSok>>, TError = unknown>(
    params?: AdresseSokParams,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof adresseSok>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getAdresseSokQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof adresseSok>>> = ({signal}) =>
        adresseSok(params, requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof adresseSok>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};
